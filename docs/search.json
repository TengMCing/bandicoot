[{"path":"tengmcing.github.io/bandicoot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 bandicoot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"tengmcing.github.io/bandicoot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer.","code":""},{"path":"tengmcing.github.io/bandicoot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2022). bandicoot: Tools building light-weight python-like object oriented system. https://tengmcing.github.io/bandicoot/, https://github.com/TengMCing/bandicoot/.","code":"@Manual{,   title = {bandicoot: Tools for building light-weight python-like object oriented system},   author = {Weihao Li},   year = {2022},   note = {https://tengmcing.github.io/bandicoot/, https://github.com/TengMCing/bandicoot/}, }"},{"path":"tengmcing.github.io/bandicoot/index.html","id":"bandicoot","dir":"","previous_headings":"","what":"Tools for building light-weight python-like object oriented system","title":"Tools for building light-weight python-like object oriented system","text":"goal bandicoot provide tools building light-weight python-like object oriented system.","code":""},{"path":"tengmcing.github.io/bandicoot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for building light-weight python-like object oriented system","text":"development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"TengMCing/bandicoot\")"},{"path":"tengmcing.github.io/bandicoot/index.html","id":"1-bandicoot-oop-system","dir":"","previous_headings":"","what":"1. bandicoot OOP system","title":"Tools for building light-weight python-like object oriented system","text":"1.1. Define new class class can defined new_class function. positional arguments specifying parent classes, BASE base object class provided package, don’t need manually specify . like advanced behaviour, can try implement object class. Class name mandatory unique. object environment containing useful attributes methods. OBJECT$..type.. gives current class name. OBJECT$..class.. gives current class name parent class names. OBJECT$..dict..() returns names attribute method object. OBJECT$..methods..() returns names method object OBJECT$..str..() returns string representation object, used S3 print() method. method usually needs overridden subclass give short summary object. 1.2. Register method class Methods can registered using register_method(). first argument object want bind function , rest positional arguments specifying method names functions. syntax method_name = function. can choose write inline function pass pre-defined function. associative environment function doesn’t matter, modified register_method() function. method needs access object , just simply use self method. reference object. 1.3. Override ..init..() method ..init..() method instance initialization. override ..init..() method, need use register_method() register . Now class requires two two arguments first_name employee_id initialize instance. 1.4. Build instance new initialize instance, need use instantiate() method. output show object. first_name employee_id stored object ..init..() method. 1.5. complete workflow recommend write class definition function make debugging easier. following example new class DEMO_2, defines ..init..() method, defines get_email() function retrieving email address, defines ..str..() method print object, provide us nicely formatted summary. use_method used run methods classes, case, ..str..() method BASE class.","code":"library(bandicoot) # You don't actually need to specify BASE here. This is only for demonstration. DEMO <- new_class(BASE, class_name = \"DEMO\") DEMO #>  #> ── <DEMO class> DEMO$..type.. #> [1] \"DEMO\" DEMO$..class.. #> [1] \"DEMO\" \"BASE\" DEMO$..dict..() #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"..repr..\"         \"del_attr\"         \"has_attr\"         #>  [9] \"set_attr\"         \"..type..\"         \"get_attr\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"instantiate\" DEMO$..methods..() #>  [1] \"..dict..\"    \"..str..\"     \"..len..\"     \"..new..\"     \"..repr..\"    #>  [6] \"del_attr\"    \"has_attr\"    \"set_attr\"    \"get_attr\"    \"..methods..\" #> [11] \"..init..\"    \"instantiate\" DEMO$..str..() #> [1] \"<DEMO class>\" pre_defined_fn <- function() 1 + 2  register_method(DEMO, inline_fn = function() 1 + 1, pre_defined_fn = pre_defined_fn) #>  #> ── <DEMO class>  DEMO$inline_fn() #> [1] 2 DEMO$pre_defined_fn() #> [1] 3 DEMO$val <- 5  register_method(DEMO, get_val = function() self$val) #>  #> ── <DEMO class>  DEMO$get_val() #> [1] 5 init <- function(first_name, employee_id) {   self$first_name <- first_name   self$employee_id <- employee_id }  register_method(DEMO, ..init.. = init) #>  #> ── <DEMO class> mike <- DEMO$instantiate(\"Mike\", 25) mike #>  #> ── <DEMO object> mike$first_name #> [1] \"Mike\" mike$employee_id #> [1] 25 class_DEMO_2 <- function(env = new.env(parent = parent.frame())) {      new_class(env = env, class_name = \"DEMO_2\")      init_ <- function(first_name, employee_id) {     self$first_name <- first_name     self$employee_id <- employee_id   }      get_email_ <- function() {     paste0(self$first_name, \"_\", self$employee_id, \"@company.com\")   }      str_ <- function() {     paste(use_method(self, BASE$..str..)(),            paste(\"Name:\", self$first_name,                 \"\\nEmployee ID:\", self$employee_id,                 \"\\nEmail:\", self$get_email()),            sep = \"\\n\")   }      register_method(env,                   ..init.. = init_,                   get_email = get_email_,                   ..str.. = str_)      return(env) } DEMO_2 <- class_DEMO_2() mike <- DEMO_2$instantiate(\"Mike\", 25) mike$get_email() #> [1] \"Mike_25@company.com\" mike$..str..() #> [1] \"<DEMO_2 object>\\nName: Mike \\nEmployee ID: 25 \\nEmail: Mike_25@company.com\" mike #>  #> ── <DEMO_2 object> #> Name: Mike  #> Employee ID: 25  #> Email: Mike_25@company.com"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..class...html","id":null,"dir":"Reference","previous_headings":"","what":"Class name and parent class names — BASE$..class..","title":"Class name and parent class names — BASE$..class..","text":"string vector.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..class...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class name and parent class names — BASE$..class..","text":"","code":"BASE$..class.. #> [1] \"BASE\"  # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\") TEST$..class.. #> [1] \"TEST\" \"BASE\""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..dict...html","id":null,"dir":"Reference","previous_headings":"","what":"All names in the class or instance environment — BASE$..dict..","title":"All names in the class or instance environment — BASE$..dict..","text":"function returns names environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..dict...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All names in the class or instance environment — BASE$..dict..","text":"vector string.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..dict...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All names in the class or instance environment — BASE$..dict..","text":"","code":"BASE$..dict..() #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"has_attr\"         \"del_attr\"         \"..repr..\"         #>  [9] \"set_attr\"         \"get_attr\"         \"..type..\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"instantiate\"       # Instantiate test <- BASE$instantiate() test$..dict..() #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"..repr..\"         \"del_attr\"         \"has_attr\"         #>  [9] \"set_attr\"         \"..type..\"         \"get_attr\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"..init_call..\""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — BASE$..init..","title":"Initialization method — BASE$..init..","text":"function called instance built. User override function derived class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — BASE$..init..","text":"... Ignored BASE, user can define owns.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — BASE$..init..","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — BASE$..init..","text":"","code":"BASE$..init.. #> function (...)  #> return(self) #> <bytecode: 0x7fde480ad660> #> <environment: 0x7fde480aae10>  # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\")  # Override the `..init..` method register_method(TEST, ..init.. = function(a) {self$x <- a}) #>  #> ── <TEST class>   # Build a `TEST` instance test <- TEST$instantiate(a = 2)  test$x #> [1] 2"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..instantiated...html","id":null,"dir":"Reference","previous_headings":"","what":"Instantiate status — BASE$..instantiated..","title":"Instantiate status — BASE$..instantiated..","text":"Whether object instance.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..instantiated...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instantiate status — BASE$..instantiated..","text":"","code":"BASE$..instantiated.. #> [1] FALSE  # Instantiate test <- BASE$instantiate() test$..instantiated.. #> [1] TRUE"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..len...html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the class or the instance — BASE$..len..","title":"Length of the class or the instance — BASE$..len..","text":"User override method derived class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..len...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the class or the instance — BASE$..len..","text":"","code":"BASE$..len..() #> NULL  # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\")  # Override the `..len..` method register_method(TEST, ..len.. = function() 1) #>  #> ── <TEST class>  TEST$..len..() #> [1] 1"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..method_env...html","id":null,"dir":"Reference","previous_headings":"","what":"The container — BASE$..method_env..","title":"The container — BASE$..method_env..","text":"container methods executed.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..method_env...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The container — BASE$..method_env..","text":"","code":"BASE$..method_env.. #> <environment: 0x7fde480aae10>  # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\") TEST$..method_env.. #> <environment: 0x7fde584ae4b0>"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..methods...html","id":null,"dir":"Reference","previous_headings":"","what":"List all methods of a class or an instance — BASE$..methods..","title":"List all methods of a class or an instance — BASE$..methods..","text":"function lists methods class instance","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..methods...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all methods of a class or an instance — BASE$..methods..","text":"string vector.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..methods...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all methods of a class or an instance — BASE$..methods..","text":"","code":"BASE$..methods..() #>  [1] \"..dict..\"    \"..str..\"     \"..len..\"     \"..new..\"     \"has_attr\"    #>  [6] \"del_attr\"    \"..repr..\"    \"set_attr\"    \"get_attr\"    \"..methods..\" #> [11] \"..init..\"    \"instantiate\""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..new...html","id":null,"dir":"Reference","previous_headings":"","what":"Build a new instance from a class or an instance — BASE$..new..","title":"Build a new instance from a class or an instance — BASE$..new..","text":"function copy methods attributes, except container, instantiate method. , ..init_call.. attribute set current system call, ..instantiated.. attribute set TRUE. Notice, ..init.. method run.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..new...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a new instance from a class or an instance — BASE$..new..","text":"env Environment. instance environment. Default env = new.env(parent = parent.frame()). init_call Call. Contents ..init_call... recommended use default value. Default init_call = sys.call().","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..new...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a new instance from a class or an instance — BASE$..new..","text":"instance environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..new...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a new instance from a class or an instance — BASE$..new..","text":"","code":"BASE$..new..() #>  #> ── <BASE object>   # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\")  TEST$..new..() #>  #> ── <TEST object>"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — BASE$..str..","title":"String representation of the object — BASE$..str..","text":"function returns string representation object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — BASE$..str..","text":"string.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — BASE$..str..","text":"","code":"BASE$..str..() #> [1] \"<BASE class>\"  # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\") TEST$..str..() #> [1] \"<TEST class>\"  # Instantiate test <- BASE$instantiate() test$..str..() #> [1] \"<BASE object>\""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..type...html","id":null,"dir":"Reference","previous_headings":"","what":"Class name — BASE$..type..","title":"Class name — BASE$..type..","text":"string.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-..type...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class name — BASE$..type..","text":"","code":"BASE$..type.. #> [1] \"BASE\"  # Inherit from BASE TEST <- new_class(BASE, class_name = \"TEST\") TEST$..type.. #> [1] \"TEST\""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-del_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an attribute — BASE$del_attr","title":"Delete an attribute — BASE$del_attr","text":"function delete attribute.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-del_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an attribute — BASE$del_attr","text":"attr_name Character. Attribute name.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-del_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete an attribute — BASE$del_attr","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-del_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an attribute — BASE$del_attr","text":"","code":"test <- BASE$instantiate() test$set_attr(\"x\", 1) #>  #> ── <BASE object>  test$x #> [1] 1 test$del_attr(\"x\") #>  #> ── <BASE object>  test$x #> NULL"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-get_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get value of an attribute or a method — BASE$get_attr","title":"Get value of an attribute or a method — BASE$get_attr","text":"function gets value attribute method.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-get_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get value of an attribute or a method — BASE$get_attr","text":"attr_name Character. Attribute name.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-get_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get value of an attribute or a method — BASE$get_attr","text":"attribute value.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-get_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get value of an attribute or a method — BASE$get_attr","text":"","code":"BASE$get_attr(\"test\") #> NULL  BASE$get_attr(\"..methods..\") #> function ()  #> names(self)[unlist(lapply(names(self), function(x) is.function(self[[x]])))] #> <bytecode: 0x7fde480ac780> #> <environment: 0x7fde480aae10>"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-has_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Whether or not an attribute or method exists — BASE$has_attr","title":"Whether or not an attribute or method exists — BASE$has_attr","text":"function checks whether attribute method exists.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-has_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Whether or not an attribute or method exists — BASE$has_attr","text":"attr_name Character. Attribute name.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-has_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Whether or not an attribute or method exists — BASE$has_attr","text":"True FALSE.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-has_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Whether or not an attribute or method exists — BASE$has_attr","text":"","code":"BASE$has_attr(\"test\") #> [1] FALSE  BASE$has_attr(\"..len..\") #> [1] TRUE"},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-instantiate.html","id":null,"dir":"Reference","previous_headings":"","what":"Instantiate method — BASE$instantiate","title":"Instantiate method — BASE$instantiate","text":"function new instance using ..new.. method, initialized instance ..init.. method.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-instantiate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instantiate method — BASE$instantiate","text":"... Arguments passed ..init.. method. env Environment. instance environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-instantiate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instantiate method — BASE$instantiate","text":"instance environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-instantiate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instantiate method — BASE$instantiate","text":"","code":"BASE$..dict..() #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"has_attr\"         \"del_attr\"         \"..repr..\"         #>  [9] \"set_attr\"         \"get_attr\"         \"..type..\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"instantiate\"       # Build an instance base_instance <- BASE$instantiate()  base_instance$..dict..() #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"..repr..\"         \"del_attr\"         \"has_attr\"         #>  [9] \"set_attr\"         \"..type..\"         \"get_attr\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"..init_call..\""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-set_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set value of an attribute or a method — BASE$set_attr","title":"Set value of an attribute or a method — BASE$set_attr","text":"function sets value attribute method.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-set_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set value of an attribute or a method — BASE$set_attr","text":"attr_name Character. Attribute name. attr_val value.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-set_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set value of an attribute or a method — BASE$set_attr","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE-cash-set_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set value of an attribute or a method — BASE$set_attr","text":"","code":"test <- BASE$instantiate() test$set_attr(\"x\", 1) #>  #> ── <BASE object>  test$x #> [1] 1"},{"path":"tengmcing.github.io/bandicoot/reference/BASE.html","id":null,"dir":"Reference","previous_headings":"","what":"BASE class environment — BASE","title":"BASE class environment — BASE","text":"class provides essential attributes methods. makes assumption container name ..method_env.. name reference self self. like use container names self names, need overwrite class definition BASE.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/BASE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BASE class environment — BASE","text":"","code":"BASE"},{"path":"tengmcing.github.io/bandicoot/reference/BASE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BASE class environment — BASE","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CLOSED_FORM$..init..","title":"Initialization method — CLOSED_FORM$..init..","text":"function called instance built. User input stored environment. simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable \"b\" exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().  Random variables replaced vector random values called gen method.  Hierarchical closed form expression also replaced vector values called gen method.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CLOSED_FORM$..init..","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CLOSED_FORM$..init..","text":"return value, called side effects.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CLOSED_FORM$..init..","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..len...html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the object — CLOSED_FORM$..len..","title":"Length of the object — CLOSED_FORM$..len..","text":"function recursively count symbols stored closed form expression nested closed form expression.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..len...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the object — CLOSED_FORM$..len..","text":"integer.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..len...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the object — CLOSED_FORM$..len..","text":"","code":"test <- closed_form(~1+1) test$..len..() #> [1] 1"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — CLOSED_FORM$..str..","title":"String representation of the object — CLOSED_FORM$..str..","text":"function returns string representation object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — CLOSED_FORM$..str..","text":"string.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — CLOSED_FORM$..str..","text":"","code":"CLOSED_FORM$..str..() #> [1] \"<CLOSED_FORM class>\"  test <- closed_form(~1+1) test$..str..() #> [1] \"<CLOSED_FORM object>\\n EXPR = 1 + 1\""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-as_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming list to data frame — CLOSED_FORM$as_dataframe","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"function transforms result generated gen data frame.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-as_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"dat Vector List. Results generated gen method. lhs Character. name expression. Default \".lhs\".","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-as_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"data frame.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-as_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate data result1 <- cf$gen(10)  cf$as_dataframe(result1) #>         .lhs #> 1  10.931963 #> 2   9.761287 #> 3   8.573800 #> 4   9.675500 #> 5   8.985109 #> 6  10.019682 #> 7   9.562999 #> 8   8.832528 #> 9  11.051499 #> 10 10.937327  # Generate data and keep the RHS result2 <- cf$gen(10, rhs_val = TRUE)  # Specify the name cf$as_dataframe(result2, lhs = \"y\") #>            y          b #> 1  10.923117 0.92275729 #> 2   9.205436 0.35019677 #> 3   8.671983 0.17237930 #> 4   9.191077 0.34541065 #> 5   8.755925 0.20035987 #> 6   8.454211 0.09978864 #> 7   9.602993 0.48271595 #> 8   9.386632 0.41059557 #> 9   9.796187 0.54711393 #> 10 10.851217 0.89879054"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract syntax tree of the expression — CLOSED_FORM$ast","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"function returns abstract syntax tree exrpession","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"expr Language. quoted expression.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"list.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"","code":"CLOSED_FORM$ast(quote(a + b)) #> [[1]] #> `+` #>  #> [[2]] #> a #>  #> [[3]] #> b #>  CLOSED_FORM$ast(quote(exp(a) + b^2)) #> [[1]] #> `+` #>  #> [[2]] #> [[2]][[1]] #> exp #>  #> [[2]][[2]] #> a #>  #>  #> [[3]] #> [[3]][[1]] #> `^` #>  #> [[3]][[2]] #> b #>  #> [[3]][[3]] #> [1] 2 #>  #>"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the expression without generating any random values — CLOSED_FORM$compute","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"function computes deterministic expression.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"Numeric value.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"","code":"test <- closed_form(~1+mean(c(1,2,3))) test$compute() #> [1] 3"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression extracted from the provided formula — CLOSED_FORM$expr","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"language object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(omit~omit~3 * (exp(a) + b))  # Only the right hand side of the last `~` will be kept cf$expr #> 3 * (exp(a) + b)  d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2$expr #> cf + 3 * d"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression — CLOSED_FORM$gen","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"function generates random values expression. Random values closed form expression share value long name.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"n Integer. Number observations. rhs_val Boolean. Whether keep right hand side values expression. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"Numeric values.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate 5 values cf$gen(5) #> [1]  8.576234 10.584135  9.347405 10.824465  9.682026  # Generate 5 values, and keep RHS cf$gen(5, rhs_val = TRUE) #> $lhs #> [1]  8.659528 10.015534 10.184513  9.303630  9.265873 #>  #> $rhs #> $rhs$b #> [1] 0.1682274 0.6202293 0.6765558 0.3829282 0.3703425 #>  #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  # Generate 5 values cf2$gen(5) #> [1]  6.012943  8.929299 13.360013 11.596569 13.151285  # Generate 5 values, and keep RHS cf2$gen(5, rhs_val = TRUE) #> $lhs #> [1]  7.896074 10.202014  8.327988 11.825830  9.870134 #>  #> $rhs #> $rhs$b #> [1] 0.5194280 0.4100838 0.3592899 0.4383252 0.5678063 #>  #> $rhs$cf #> [1] 9.713129 9.385097 9.232715 9.469821 9.858264 #>  #> $rhs$d #> [1] -0.605685226  0.272305795 -0.301575660  0.785336293  0.003956456 #>  #>   # Define a closed form expression with two random variables of the same name cf3 <- closed_form(~d + d)  # Both `d` will share the same values cf3$gen(5, rhs_val = TRUE) #> $lhs #> [1] -2.4670836 -0.9277375 -4.0680066  1.0949846  0.4997466 #>  #> $rhs #> $rhs$d #> [1] -1.2335418 -0.4638687 -2.0340033  0.5474923  0.2498733 #>  #>   # Define a closed form expression with two closed form expressions of the same name cf4 <- closed_form(~cf3 + cf3)  # Both `cf3` will share the same values, both `d` will share the same values as well cf4$gen(5, rhs_val = TRUE) #> $lhs #> [1] -1.7611694 -0.4657788  0.4454216  0.4803071  1.0435335 #>  #> $rhs #> $rhs$d #> [1] -0.4402924 -0.1164447  0.1113554  0.1200768  0.2608834 #>  #> $rhs$cf3 #> [1] -0.8805847 -0.2328894  0.2227108  0.2401536  0.5217668 #>  #>   # Define a closed form expression with two different closed form expressions, # but contains same random variables cf5 <- closed_form(~cf3 + cf4)  # Both `d` in `cf3` and `cf4` will share the same value cf5$gen(5, rhs_val = TRUE) #> $lhs #> [1] -9.7546714 12.3238142  3.5898871  1.6746520 -0.4727185 #>  #> $rhs #> $rhs$d #> [1] -1.62577857  2.05396904  0.59831451  0.27910866 -0.07878642 #>  #> $rhs$cf3 #> [1] -3.2515571  4.1079381  1.1966290  0.5582173 -0.1575728 #>  #> $rhs$cf4 #> [1] -6.5031143  8.2158761  2.3932580  1.1164346 -0.3151457 #>  #>   # Control the value of `d` cf5$gen(5, rhs_val = TRUE, computed = list(d = 1)) #> $lhs #> [1] 6 #>  #> $rhs #> $rhs$d #> [1] 1 #>  #> $rhs$cf3 #> [1] 2 #>  #> $rhs$cf4 #> [1] 4 #>  #>"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the closed form expression — CLOSED_FORM$set_expr","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"function updates closed form expression. update symbol values. updating symbol values, please check CLOSED_FORM$set_sym.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update the expression z$set_expr(~2 - a) #>  #> ── <CLOSED_FORM object> #> EXPR = 2 - a   z$compute() #> [1] 1"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values for symbols — CLOSED_FORM$set_sym","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"function stores user inputs updated values symbols. List symbol names symbol types updated automatically. protection values modified, may lead error loss binding objects. Please use function caution.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"sym_name Vector List. sequence character symbol names. sym_value Vector List. sequence symbol values.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-set_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update value for \"a\" z$set_sym(\"a\", 3) #>  #> ── <CLOSED_FORM object> #> EXPR = 2 + a   z$compute() #> [1] 5  # Update value for \"+\" z$set_sym(\"+\", list(function(a, b) a * b)) #>  #> ── <CLOSED_FORM object> #> EXPR = 2 + a   z$compute() #> [1] 6"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-sym.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"list, initialized instance built.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   # Get the list of symbols cf$sym #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $`(` #> .Primitive(\"(\") #>  #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $exp #> function (x)  .Primitive(\"exp\") #>  #> $a #> [1] 1 #>  #> $b #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>   # Get the list of symbol names cf$sym_name #> [[1]] #> [1] \"*\" #>  #> [[2]] #> [1] \"(\" #>  #> [[3]] #> [1] \"+\" #>  #> [[4]] #> [1] \"exp\" #>  #> [[5]] #> [1] \"a\" #>  #> [[6]] #> [1] \"b\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]   # Get the list of symbols, constants are not counted as symbols cf2$sym #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]  #>  #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $d #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>   # Get the list of symbol names cf2$sym_name #> [[1]] #> [1] \"+\" #>  #> [[2]] #> [1] \"cf\" #>  #> [[3]] #> [1] \"*\" #>  #> [[4]] #> [1] \"d\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-sym_name.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","title":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM-cash-sym_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","title":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM.html","id":null,"dir":"Reference","previous_headings":"","what":"CLOSED_FORM class environment — CLOSED_FORM","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"base class closed form expression, inherited BASE.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"","code":"CLOSED_FORM"},{"path":"tengmcing.github.io/bandicoot/reference/CLOSED_FORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_LOGNORMAL$..init..","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"mu Numeric. Mean log random variable. Default 0. sigma Numeric. Standard deviation log random variable. Default 1.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"","code":"# Instantiate test <- rand_lognormal(mu = 1, sigma = 2) test #>  #> ── <RAND_LOGNORMAL object> #> [mu: 1, sigma: 2]"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_LOGNORMAL$gen","title":"Generate random values — RAND_LOGNORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_LOGNORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_LOGNORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_LOGNORMAL$gen","text":"","code":"test <- rand_lognormal(mu = 1, sigma = 2) test$gen(10) #>  [1]  3.2459086 15.7991850  0.1145180 86.1065482  0.7333095 15.4223194 #>  [7]  0.4894753  0.1126218  0.4693472  1.3556352  test$gen(3, mu = c(0,1,2), sigma = c(1,2,3)) #> [1]  1.154586  0.902268 20.614592"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"class log-normal random variable, inherited RAND_VAR.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"","code":"RAND_LOGNORMAL"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_LOGNORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_NORMAL$..init..","title":"Initialization method — RAND_NORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_NORMAL$..init..","text":"mu Numeric. Mean. Default 0. sigma Numeric. Standard deviation. Default 1.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_NORMAL$..init..","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_NORMAL$..init..","text":"","code":"# Instantiate test <- rand_normal(mu = 1, sigma = 2) test #>  #> ── <RAND_NORMAL object> #> [mu: 1, sigma: 2]"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_NORMAL$gen","title":"Generate random values — RAND_NORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_NORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_NORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_NORMAL$gen","text":"","code":"test <- rand_normal(mu = 1, sigma = 2) test$gen(10) #>  [1]  3.1777660  2.2784816  0.4247029  4.3065322 -0.5684202  2.6363786 #>  [7]  5.3125752  2.6453623  3.4022110 -0.6029653  test$gen(3, mu = c(0,1,2), sigma = c(1,2,4)) #> [1]  0.3307645  2.1726241 -1.0490859"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_NORMAL class environment — RAND_NORMAL","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"class normal random variable, inherited RAND_VAR.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"","code":"RAND_NORMAL"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_NORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM$..init..","title":"Initialization method — RAND_UNIFORM$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM$..init..","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM$..init..","text":"","code":"# Instantiate test <- rand_uniform(a = 1, b = 2) test #>  #> ── <RAND_UNIFORM object> #> [a: 1, b: 2]"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM$gen","title":"Generate random values — RAND_UNIFORM$gen","text":"function generates random values random variable.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM$gen","text":"","code":"test <- rand_uniform(a = 1, b = 2) test$gen(10) #>  [1] 1.837143 1.854298 1.380911 1.231428 1.921254 1.282889 1.742147 1.394224 #>  [9] 1.142803 1.198919  test$gen(3, a = c(1,2,3), b = c(2,3,4)) #> [1] 1.112895 2.857267 3.700066"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM class environment — RAND_UNIFORM","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"class uniform random variable, inherited RAND_VAR.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"","code":"RAND_UNIFORM"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM_D$..init..","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1. k Integer. Number unique discrete values. Default 5. even Boolean. Whether candidate values evenly spaced.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"","code":"# Instantiate test <- rand_uniform_d(a = 1, b = 2, k = 3) test #>  #> ── <RAND_UNIFORM_D object> #> [a: 1, b: 2, k: 3, even: 0]"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM_D$gen","title":"Generate random values — RAND_UNIFORM_D$gen","text":"function generates random values random variable.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM_D$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization. k Numeric. provided length n, values used realization. even Boolean. provided length n, values used realization.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM_D$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM_D$gen","text":"","code":"test <- rand_uniform_d(a = 1, b = 2, k = 2, even = TRUE) test$gen(10) #>  [1] 2 2 2 2 1 2 1 2 2 2  test$gen(3, a = c(1,2,3), b = c(2,3,4), k = 1, even = c(TRUE, TRUE, FALSE)) #> [1] 1 2 1"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"class discrete uniform random variable, inherited RAND_VAR.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"","code":"RAND_UNIFORM_D"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_UNIFORM_D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_VAR$..init..","title":"Initialization method — RAND_VAR$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_VAR$..init..","text":"dist Character. Distribution name. prm List. List parameters.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_VAR$..init..","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_VAR$..init..","text":"","code":"RAND_VAR$..init.. #> function (dist = \"uniform\", prm = list())  #> { #>     self$dist <- dist #>     if (!is.list(prm))  #>         stop(\"`prm` is not a list!\") #>     self$prm <- prm #>     return(self) #> } #> <bytecode: 0x7fcc66d302e0> #> <environment: 0x7fcc66d2bb00>  # Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — RAND_VAR$..str..","title":"String representation of the object — RAND_VAR$..str..","text":"function returns string representation object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — RAND_VAR$..str..","text":"string.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — RAND_VAR$..str..","text":"","code":"RAND_VAR$..str..() #> [1] \"<RAND_VAR class>\"  test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$..str..() #> [1] \"<RAND_VAR object>\\n [a: 1, b: 2]\""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the random variable — RAND_VAR$E","title":"Expectation of the random variable — RAND_VAR$E","text":"Expectation random variable. User override method derived class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the random variable — RAND_VAR$E","text":"NA","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the random variable — RAND_VAR$E","text":"","code":"RAND_VAR$E() #> [1] NA"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-Var.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the random variable — RAND_VAR$Var","title":"Variance of the random variable — RAND_VAR$Var","text":"Variance random variable. User override method derived class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-Var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the random variable — RAND_VAR$Var","text":"NA","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-Var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the random variable — RAND_VAR$Var","text":"","code":"RAND_VAR$Var() #> [1] NA"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution name — RAND_VAR$dist","title":"Distribution name — RAND_VAR$dist","text":"string, initialized instance built.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution name — RAND_VAR$dist","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$gen","title":"Generate random values — RAND_VAR$gen","text":"function generates random values random variable.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$gen","text":"n Integer. Number observations. ... Ignored.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$gen","text":"NA. User needs define gen method derived class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$gen","text":"","code":"test <- RAND_VAR$gen(10)"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — RAND_VAR$prm","title":"List of parameters — RAND_VAR$prm","text":"list, initialized instance built.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — RAND_VAR$prm","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$set_prm","title":"Generate random values — RAND_VAR$set_prm","text":"function updates parameters.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$set_prm","text":"prm_name List Vector. sequence character parameter names. prm_value List Vector. sequence parameter values.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$set_prm","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$set_prm","text":"","code":"test <- rand_var() test$set_prm(\"a\", 1) #>  #> ── <RAND_VAR object> #> [a: 1]  test #>  #> ── <RAND_VAR object> #> [a: 1]"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_VAR class environment — RAND_VAR","title":"RAND_VAR class environment — RAND_VAR","text":"base class random variable, inherited BASE.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_VAR class environment — RAND_VAR","text":"","code":"RAND_VAR"},{"path":"tengmcing.github.io/bandicoot/reference/RAND_VAR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_VAR class environment — RAND_VAR","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/as_bandicoot_oop.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an environment into a bandicoot_oop object — as_bandicoot_oop","title":"Turn an environment into a bandicoot_oop object — as_bandicoot_oop","text":"function tries turn environment bandicoot_oop object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/as_bandicoot_oop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an environment into a bandicoot_oop object — as_bandicoot_oop","text":"","code":"as_bandicoot_oop(   env,   ..class.. = NULL,   ..type.. = NULL,   ..instantiated.. = NULL,   overwrite_container = FALSE,   register = FALSE,   in_place = FALSE,   container_name = \"..method_env..\",   self_name = \"self\" )"},{"path":"tengmcing.github.io/bandicoot/reference/as_bandicoot_oop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an environment into a bandicoot_oop object — as_bandicoot_oop","text":"env environment. ..class.. Character. series class names. ..type.. Character. class name object. ..instantiated.. Boolean. Whether object instance. overwrite_container Boolean. Whether overwrite container. register Boolean. Whether register functions . in_place Boolean. Whether modify environment -place. , new environment created. container_name Character. Name container. self_name Character. Name self reference.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/as_bandicoot_oop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn an environment into a bandicoot_oop object — as_bandicoot_oop","text":"Boolean value.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/as_bandicoot_oop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn an environment into a bandicoot_oop object — as_bandicoot_oop","text":"","code":"e <- new.env() e$a <- function() self  as_bandicoot_oop(e,                  ..class.. = \"test\",                  ..type.. = \"test\",                  ..instantiated.. = FALSE,                  register = TRUE,                  in_place = TRUE) #>  #> ── <unknown object>   e #>  #> ── <unknown object>  e$a() #>  #> ── <unknown object>"},{"path":"tengmcing.github.io/bandicoot/reference/bind_fn_2_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind functions of the current environment to a target environment — bind_fn_2_env","title":"Bind functions of the current environment to a target environment — bind_fn_2_env","text":"function equivalent environment(fn) <- env. Hence functions must bind names.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/bind_fn_2_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind functions of the current environment to a target environment — bind_fn_2_env","text":"","code":"bind_fn_2_env(env, ...)"},{"path":"tengmcing.github.io/bandicoot/reference/bind_fn_2_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind functions of the current environment to a target environment — bind_fn_2_env","text":"env Environment. ... Functions.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/bind_fn_2_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind functions of the current environment to a target environment — bind_fn_2_env","text":"return value, called side effects.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/bind_fn_2_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind functions of the current environment to a target environment — bind_fn_2_env","text":"Pass character function names ... cause error.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/bind_fn_2_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind functions of the current environment to a target environment — bind_fn_2_env","text":"","code":"# Access the associated environment inside a function  self <- NULL e <- new.env()  # The associated environment needs to have a reference to itself e$self <- e  e$show_self <- function() return(self)  # The function can only access the global variable `self` e$show_self() #> NULL  # Bind the function to the environment `e` bind_fn_2_env(env = e, e$show_self)  # Both point to the same environment e$show_self() #> <environment: 0x7fde488cbe78> e #> <environment: 0x7fde488cbe78>"},{"path":"tengmcing.github.io/bandicoot/reference/check_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Check each method body in an object if it contains names that do not\nexplicitly bind to a specified namespace via ::. — check_method","title":"Check each method body in an object if it contains names that do not\nexplicitly bind to a specified namespace via ::. — check_method","text":"Method body contain names like \"mutate\" packages, usually problem long package namespace search path available parent environment object. However, package loaded via functions like library() name used method body unavailable parent environment object, error may raised saying \"object name found\" method run.  function helps detect kind problems. Users needs specify names want detect, specify package belong .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/check_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check each method body in an object if it contains names that do not\nexplicitly bind to a specified namespace via ::. — check_method","text":"","code":"check_method(env, symbol_name, target_namespace)"},{"path":"tengmcing.github.io/bandicoot/reference/check_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check each method body in an object if it contains names that do not\nexplicitly bind to a specified namespace via ::. — check_method","text":"env Environment. environment. symbol_name Character. Names want detected. target_namespace Character. Name package symbols belong .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/check_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check each method body in an object if it contains names that do not\nexplicitly bind to a specified namespace via ::. — check_method","text":"return value, called side effects.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/check_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check each method body in an object if it contains names that do not\nexplicitly bind to a specified namespace via ::. — check_method","text":"","code":"e <- new.env() register_method(e, test = function() cli_alert_info(\"test\")) #> <environment: 0x7fde3f9ff238> check_method(e, \"cli_alert_info\", \"cli\") #> Found `cli_alert_info` in method `test`.  register_method(e, test = function() cli::cli_alert_info(\"test\")) #> <environment: 0x7fde3f9ff238> check_method(e, \"cli_alert_info\", \"cli\")"},{"path":"tengmcing.github.io/bandicoot/reference/copy_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy attributes and methods from classes or instances — copy_attr","title":"Copy attributes and methods from classes or instances — copy_attr","text":"function copy attributes methods classes instances class instance.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/copy_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy attributes and methods from classes or instances — copy_attr","text":"","code":"copy_attr(env, ..., avoid = c(\"..method_env..\", \"..init_call..\"))"},{"path":"tengmcing.github.io/bandicoot/reference/copy_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy attributes and methods from classes or instances — copy_attr","text":"env Environment. destination environment. ... Environments. Source environments. avoid Character. Names want copied.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/copy_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy attributes and methods from classes or instances — copy_attr","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/copy_attr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy attributes and methods from classes or instances — copy_attr","text":"Multiple classes instances can provided ..., right one override left one attribute method name. Attributes methods want copied can specified avoid.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/copy_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy attributes and methods from classes or instances — copy_attr","text":"","code":"test <- new.env() names(BASE) #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"has_attr\"         \"del_attr\"         \"..repr..\"         #>  [9] \"set_attr\"         \"get_attr\"         \"..type..\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"instantiate\"      copy_attr(test, BASE, avoid = c(\"..method_env..\", \"..init_call..\", \"..dict..\")) #> <environment: 0x7fde48241e40> names(test) #>  [1] \"..str..\"          \"..len..\"          \"..class..\"        \"..new..\"          #>  [5] \"..repr..\"         \"del_attr\"         \"has_attr\"         \"set_attr\"         #>  [9] \"..type..\"         \"get_attr\"         \"..methods..\"      \"..method_env..\"   #> [13] \"..instantiated..\" \"..init..\"         \"instantiate\""},{"path":"tengmcing.github.io/bandicoot/reference/define_pkg_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Load functions from package namespaces into current environment — define_pkg_fn","title":"Load functions from package namespaces into current environment — define_pkg_fn","text":"function loads functions package namespaces via :: assigns preferred function names current environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/define_pkg_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load functions from package namespaces into current environment — define_pkg_fn","text":"","code":"define_pkg_fn(pkg, ...)"},{"path":"tengmcing.github.io/bandicoot/reference/define_pkg_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load functions from package namespaces into current environment — define_pkg_fn","text":"pkg Package. ... Functions. Preferred names can provide via named arguments.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/define_pkg_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load functions from package namespaces into current environment — define_pkg_fn","text":"return value, called side effects.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/define_pkg_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load functions from package namespaces into current environment — define_pkg_fn","text":"Preferred function names can provide via named arguments like info = cli_alert_info.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/define_pkg_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load functions from package namespaces into current environment — define_pkg_fn","text":"","code":"define_pkg_fn(pkg = cli, cli_alert_info, cli_alert_warning) define_pkg_fn(cli, cli_alert_warning, info = cli_alert_info)"},{"path":"tengmcing.github.io/bandicoot/reference/import_bandicoot.html","id":null,"dir":"Reference","previous_headings":"","what":"Load functions from the bandicoot into target environment — import_bandicoot","title":"Load functions from the bandicoot into target environment — import_bandicoot","text":"function critical packages want use bandicoot OOP system. Since OOP system based environment, instance run environment defined. , function like use_method exists package environment can accessed instance, unless function loaded current environment calling use_method <- bandicoot::use_method, require(bandicoot) library(bandicoot). issue can usually addressed using package name directly inside method body like this_method <- function() bandicoot::use_method(). However, possible, function helps loads corresponding function target environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/import_bandicoot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load functions from the bandicoot into target environment — import_bandicoot","text":"","code":"import_bandicoot(env = parent.frame(), import_oop = TRUE, import_base = TRUE)"},{"path":"tengmcing.github.io/bandicoot/reference/import_bandicoot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load functions from the bandicoot into target environment — import_bandicoot","text":"env Environment. target environment. import_oop Boolean. Whether import OOP tools. import_base Boolean. Whether import BASE class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/import_bandicoot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load functions from the bandicoot into target environment — import_bandicoot","text":"return value, called side effects.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/import_bandicoot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load functions from the bandicoot into target environment — import_bandicoot","text":"function call define_pkg_fn.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/is_bandicoot_oop.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the object is a bandicoot_oop object — is_bandicoot_oop","title":"Check whether the object is a bandicoot_oop object — is_bandicoot_oop","text":"function check whether object bandicoot_oop object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/is_bandicoot_oop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the object is a bandicoot_oop object — is_bandicoot_oop","text":"","code":"is_bandicoot_oop(obj, why = FALSE)"},{"path":"tengmcing.github.io/bandicoot/reference/is_bandicoot_oop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the object is a bandicoot_oop object — is_bandicoot_oop","text":"obj object. Boolean. Whether print reason check fail.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/is_bandicoot_oop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the object is a bandicoot_oop object — is_bandicoot_oop","text":"Boolean value.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/is_bandicoot_oop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the object is a bandicoot_oop object — is_bandicoot_oop","text":"","code":"e <- new.env() is_bandicoot_oop(e) #> [1] FALSE  e <- new_class(class_name = \"test\") is_bandicoot_oop(e) #> [1] TRUE"},{"path":"tengmcing.github.io/bandicoot/reference/new_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new class — new_class","title":"Define a new class — new_class","text":"function declare new class, copies attributes methods parent classes.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/new_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new class — new_class","text":"","code":"new_class(   ...,   env = new.env(parent = parent.frame()),   class_name = NULL,   empty_class = FALSE )"},{"path":"tengmcing.github.io/bandicoot/reference/new_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new class — new_class","text":"... Environments. Parent class environments. env Environment. new class environment. class_name Name new class. empty_class Boolean. Whether create empty class. used want inherited BASE, want define base object class. ignored ... empty. ... empty empty_class == FALSE, BASE used parent class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/new_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a new class — new_class","text":"class environment S3 class \"bandicoot_oop\".","code":""},{"path":"tengmcing.github.io/bandicoot/reference/new_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a new class — new_class","text":"Parents can provided ..., methods attributes overrided left classes. ... empty empty_class == FALSE, BASE used parent class.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/new_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new class — new_class","text":"","code":"MYCLASS <- new_class(class_name = \"MYCLASS\") MYCLASS #>  #> ── <MYCLASS class>  names(MYCLASS) #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"..repr..\"         \"del_attr\"         \"has_attr\"         #>  [9] \"set_attr\"         \"..type..\"         \"get_attr\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"instantiate\"       # Inhert from BASE class TEST <- new_class(BASE, class_name = \"TEST\") TEST #>  #> ── <TEST class>  names(TEST) #>  [1] \"..dict..\"         \"..str..\"          \"..len..\"          \"..class..\"        #>  [5] \"..new..\"          \"..repr..\"         \"del_attr\"         \"has_attr\"         #>  [9] \"set_attr\"         \"..type..\"         \"get_attr\"         \"..methods..\"      #> [13] \"..method_env..\"   \"..instantiated..\" \"..init..\"         \"instantiate\""},{"path":"tengmcing.github.io/bandicoot/reference/portal.html","id":null,"dir":"Reference","previous_headings":"","what":"Portals to class instantiate methods — portal","title":"Portals to class instantiate methods — portal","text":"functions class$instantiate.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/portal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portals to class instantiate methods — portal","text":"","code":"base_(..., env = new.env(parent = parent.frame()))"},{"path":"tengmcing.github.io/bandicoot/reference/portal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portals to class instantiate methods — portal","text":"... Arguments passed init method. env Environment. instance environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/portal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Portals to class instantiate methods — portal","text":"base_: BASE","code":""},{"path":"tengmcing.github.io/bandicoot/reference/print.bandicoot_oop.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method of printing bandicoot_oop object — print.bandicoot_oop","title":"S3 method of printing bandicoot_oop object — print.bandicoot_oop","text":"function print string representation object.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/print.bandicoot_oop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method of printing bandicoot_oop object — print.bandicoot_oop","text":"","code":"# S3 method for bandicoot_oop print(x, ...)"},{"path":"tengmcing.github.io/bandicoot/reference/print.bandicoot_oop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method of printing bandicoot_oop object — print.bandicoot_oop","text":"x bandicoot_oop object. ... ignored.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/print.bandicoot_oop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method of printing bandicoot_oop object — print.bandicoot_oop","text":"return value, called side effects.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/register_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Register method for an object environment — register_method","title":"Register method for an object environment — register_method","text":"function register function method object environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/register_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register method for an object environment — register_method","text":"","code":"register_method(   env,   ...,   container_name = \"..method_env..\",   self_name = \"self\" )"},{"path":"tengmcing.github.io/bandicoot/reference/register_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register method for an object environment — register_method","text":"env Environment. Object environment. ... Named Functions. Functions needs provided named format, like = function() 1. container_name Character. Name container. Methods executed inside container. self_name Character. Name self reference. Methods needs use name access object environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/register_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register method for an object environment — register_method","text":"Return object .","code":""},{"path":"tengmcing.github.io/bandicoot/reference/register_method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register method for an object environment — register_method","text":"Methods executed inside container, child environment parent object environment. Thus, methods can access variables object environment directly, can access variables parent object environment directly. designed way methods access object environment using name \"self\", name can changed specifying string self_name. default name container \"..method_env..\". also can changed specifying string container_name. object can multiple containers, every container recommended contain one self reference.  Method needs provided = function() 1, name method right hand side equal sign function. Warning raised container contains contents self reference.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/register_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register method for an object environment — register_method","text":"","code":"a <- function() self$x  e <- new.env() e$x <- 1  # Register the method `aa` for environment `e` with `self_name = \"self\"` register_method(e, aa = a, self_name = \"self\") #> <environment: 0x7fde3f5bd768>  # There is an environment `..method_env..` in the environment `e` names(e) #> [1] \"x\"              \"..method_env..\" \"aa\"              # The container is empty (except `self`) names(e$..method_env..) #> [1] \"self\"  # `self` is a reference to `e` identical(e, e$..method_env..$self) #> [1] TRUE  # The method `aa` will be evaluated in the container identical(environment(e$aa), e$..method_env..) #> [1] TRUE  # Therefore, `self$x` is a reference to variable `x` of the environment `e` e$aa() #> [1] 1"},{"path":"tengmcing.github.io/bandicoot/reference/sub_fn_body_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute a symbol in a function body — sub_fn_body_name","title":"Substitute a symbol in a function body — sub_fn_body_name","text":"function substitute old_names new_names function body, drops attributes.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/sub_fn_body_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute a symbol in a function body — sub_fn_body_name","text":"","code":"sub_fn_body_name(fn, old_name, new_name)"},{"path":"tengmcing.github.io/bandicoot/reference/sub_fn_body_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute a symbol in a function body — sub_fn_body_name","text":"fn Function. old_name Character. Name needs replaced. new_name Character. Replacement old name.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/sub_fn_body_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute a symbol in a function body — sub_fn_body_name","text":"function.","code":""},{"path":[]},{"path":"tengmcing.github.io/bandicoot/reference/sub_fn_body_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute a symbol in a function body — sub_fn_body_name","text":"","code":"a <- function() self$x + self$y a #> function() self$x + self$y #> <environment: 0x7fde4941b190>  sub_fn_body_name(a, \"self\", \"this\") #> function ()  #> this$x + this$y #> <environment: 0x7fde4941b190>"},{"path":"tengmcing.github.io/bandicoot/reference/use_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a method in an object environment — use_method","title":"Use a method in an object environment — use_method","text":"function makes copy function, set evaluation environment container object environment.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/use_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a method in an object environment — use_method","text":"","code":"use_method(env, fn, container_name = \"..method_env..\")"},{"path":"tengmcing.github.io/bandicoot/reference/use_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a method in an object environment — use_method","text":"env Environment. Object. fn Function. Method. container_name Character. Name container.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/use_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a method in an object environment — use_method","text":"method.","code":""},{"path":"tengmcing.github.io/bandicoot/reference/use_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a method in an object environment — use_method","text":"","code":"TEST <- new_class(class_name = \"TEST\")  register_method(TEST, ..str.. = function() \"test\") #>  #> ── test   test <- TEST$instantiate(dist = \"uniform\", prm = list(a = 1, b = 2)) test$..str..() #> [1] \"test\"  # Use method `..str..` from BASE class use_method(test, BASE$..str..)() #> [1] \"<TEST object>\""},{"path":"tengmcing.github.io/bandicoot/news/index.html","id":"bandicoot-010","dir":"Changelog","previous_headings":"","what":"bandicoot 0.1.0","title":"bandicoot 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
