% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oop.R
\name{make_instantiator}
\alias{make_instantiator}
\title{Make convenient wrapper for instantiation method}
\usage{
make_instantiator(class_env, env = parent.frame(), new_defaults = alist())
}
\arguments{
\item{class_env}{Environment. A class environment.}

\item{env}{Environment. Environment in which the wrapper should be defined.}

\item{new_defaults}{Alist. New defaults to be used in the formal argument of
the wrapper. Formal argument not presented in \code{..new..} or \code{..init..} will
be ignored and a warning will be raised. See also \code{\link[=alist]{alist()}}.}
}
\value{
A wrapper function.
}
\description{
This function creates a instantiator wrapper for a class by inspecting
the required arguments of its \code{..new..} and \code{..init..} methods. It
captures the class name from the provided argument, so it is best
invoked directly, e.g., \code{my_class <- make_instantiator(MY_CLASS)}.
}
\details{
Care must be taken when either \code{..new..} or \code{..init..} includes \code{...} as a
formal argument, as this may lead to unexpected behavior in argument passing
within the wrapper function. After creating the wrapper, it is recommended to
reorder or modify the formals as needed using \code{\link[=formals]{formals()}}.
}
\examples{

MYCLASS <- new_class(class_name = "MYCLASS")
register_method(MYCLASS, ..init.. = function(name) self$name <- name)
myclass <- make_instantiator(MYCLASS)
myclass

myclass("Mike")$name

myclass_2 <- make_instantiator(MYCLASS, new_defaults = alist(name = "MIKE"))
myclass_2()$name

}
